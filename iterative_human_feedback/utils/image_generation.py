import random
import torch
import re
from torch import randn

word_list = [
    '16-Bit',
    '1950s-suburbia',
    '3d',
    '4k',
    '4k-resolution',
    '70s-science-fiction',
    '8k',
    'acid-colors',
    'acrylic painting',
    'acrylic-marbling-art',
    'acrylic-pour',
    'aerial-photograph',
    'aesthetic',
    'Aestheticism',
    'airbrush',
    'album-cover',
    'alcohol-ink',
    'alien',
    'ambient-lighting',
    'Amiga-500-style',
    'anime',
    'animecore',
    'apocalyptic',
    'art nouveau',
    'art-brut',
    'art-deco',
    'art-nouveau',
    'Arte-Povera',
    'artstation-hq',
    'artwork',
    'Ashcan-School-painting',
    'Assemblage',
    'astrophotography',
    'Atari-2600-style',
    'atmospheric',
    'atompunk',
    'autochrome',
    'award-winning',
    'backlight',
    'baroque',
    'Batik',
    'beatnik',
    'beautiful',
    'beautifully-lit',
    'behance',
    'behance-HD',
    'bioluminiscent',
    'biomechanical',
    'biomorphic',
    'biophilic',
    'biopunk',
    'Blade-Runner-2049',
    'blurry',
    'board-game',
    'bokeh',
    'by Alphonse Mucha',
    'By art germ',
    'by Frida Kahlo',
    'by Greg Rutkowski',
    'by John Collier',
    'by John Singer Sargent',
    'by Josef Thoma',
    'by Stanley Artgerm Lau',
    'by Thomas Cole',
    'by-GLaDOS',
    'candle-light',
    'Canon50',
    'cassette-futurism',
    'Castlevania-style',
    'cgsociety',
    'chalk',
    'chibi',
    'chillwave',
    'chromatic-aberration',
    'cinematic lighting',
    'cityscape',
    'claymation',
    'Close-up',
    'clutter',
    'CMYK',
    'color-splash',
    'coloring-book-style',
    'comic',
    'concept-art',
    'contest-winner',
    'contrasting-colors',
    'cosmic-horror',
    'cosmic-nebulae',
    'CryEngine',
    'crystallized',
    'Cubo-Futurism',
    'cyanotype',
    'cyberdelic',
    'cyberpop',
    'cyberpunk',
    'cymatics',
    'Dada-collage',
    'daguerrotype',
    'dark',
    'dark-fine-art',
    'darkwave',
    'DayGlo',
    'De-Stijl',
    'deathpunk',
    'dehazed',
    'Demoscene',
    'dense-light-rays',
    'desaturated',
    'deserted',
    'desolate',
    'deviantart',
    'Digital painting',
    'digital-art',
    'digital-collage',
    'digital-illustration',
    'diorama',
    'DMT',
    'DnD-style',
    'doodle',
    'Dota-style',
    'double-exposure',
    'dramatic',
    'Dreamworks',
    'dripping-colors',
    'dynamic-lighting',
    'dystopian',
    'Edwardian',
    'Egyptian-mythology',
    'eldritch',
    'elegant',
    'en-plein-air',
    'Encaustic',
    'enlightenment',
    'etched-metal',
    'etched-stone',
    'ethereal',
    'evil',
    'excited',
    'expansive',
    'extremely detailed',
    'eye-strain',
    'fantasy',
    'fashion-editorial',
    'fauvism',
    'fearful',
    'feline',
    'ferrofluid',
    'fine-art',
    'fineartamerica',
    'fluo-colors',
    'foreboding',
    'fractal',
    'funk-art',
    'furry',
    'futuresynth',
    'Futurism',
    'futuristic',
    'glamour-shot',
    'glass',
    'glitch-art',
    'glitchcore',
    'glow-in-the-dark',
    'glowwave',
    'god rays',
    'gold-leaf',
    'golden-hour',
    'goth',
    'gothic',
    'gouache-painting',
    'graffiti',
    'hallucinogenic',
    'haze-filter',
    'hi-fructose',
    'high resolution',
    'high-chroma',
    'high-contrast',
    'high-speed-liquid-photography',
    'highly detailed',
    'holographic',
    'holography',
    'horror',
    'HQ',
    'hydrodipped',
    'hyper-detailed',
    'hyperpop',
    'hyperrealistic',
    'infectious',
    'infrared',
    'International-Typographic-Style',
    'Interstellar',
    'intricate',
    'intricate-artwork',
    'iridescence',
    'iridescent gold',
    'isometric',
    'isotype',
    'kaleidoscopic',
    'kawaii',
    'Lego-model',
    'lighting',
    'linbeart',
    'lineart',
    'linocut',
    'liquid-ink',
    'lomo-effect',
    'lomography',
    'long-exposure',
    'low angle shot',
    'low-contrast',
    'low-poly',
    'LSD',
    'lunarpunk',
    'macabre',
    'macabre-fine-art',
    'Macchiaioli',
    'manga',
    'marbling',
    'massurrealism',
    'masterpiece',
    'matte painting',
    'matte-painting',
    'messy',
    'metallic',
    'microscopic',
    'minecraftcore',
    'minimalism',
    'MOBA-style',
    'Modernist',
    'monochromatic',
    'moody-lighting',
    'morbid-fine-art',
    'Mughal-painting',
    'multiracial',
    'mummified',
    'mural',
    'naive',
    'Native-American-mythology',
    'nebulous',
    'neon',
    'neon-pastel',
    'NES-style',
    'normcore',
    'Nvidia-RTX',
    'octane',
    'oil-on-canvas',
    'oily',
    'Op-art',
    'optical-art',
    'ornate',
    'overgrown',
    'Pantone',
    'papercraft',
    'paranormalpunk',
    'patchwork',
    'Pattachitra',
    'pencil sketch',
    'petroglyph',
    'photorealistic',
    'pixabay',
    'pixel-art',
    'pixiv',
    'Pointillisme',
    'polarized-light',
    'polygonal',
    'pop-art',
    'Portrait',
    'poster',
    'powerful',
    'pre-raphaelite',
    'primary-colors',
    'prismatic',
    'propaganda-poster',
    'psilocybin',
    'psychedelic',
    'radiant',
    'Rajasthani-painting',
    'ray-tracing',
    'refraction',
    'Renaissance',
    'Rendered by octane',
    'rendered-in-octane',
    'rendered-with-Blender',
    'retro-futurism',
    'retrowave',
    'risograph',
    'robloxcore',
    'rococo',
    'ross tran',
    'RTX',
    'sand-painting',
    'sci-fi',
    'science-fiction',
    'scrapbooking',
    'screenprinting',
    'seapunk',
    'sepia',
    'serious',
    'sfumato',
    'sharp-focus',
    'shot-on-Nikon-D750',
    'silk',
    'silver',
    'sketch',
    'soft-grunge',
    'soft-shaded',
    'solarpunk',
    'southern-gothic',
    'soviet-poster',
    'sovietwave',
    'sparklecore',
    'splash-art',
    'splatter-art',
    'spooky',
    'stained-glass',
    'steampunk',
    'sticker',
    'Stranger-Things',
    'street-art',
    'stunning',
    'stunningly beautiful',
    'super-wide-angle',
    'Symmetric',
    'Tanjore',
    'Tarot-card',
    'tenebrism',
    'thangka',
    'tilt-shift',
    'tonalism',
    'trending in artstation',
    'trending-on-artstation',
    'trippy',
    'ukiyo-e',
    'Ultra realistic illustration',
    'underwater-photography',
    'unicorncore',
    'unimaginable-beauty',
    'unreal-engine',
    'Unsplash',
    'Unsplash-contest-winner',
    'vaporwave',
    'vector-art',
    'velvia',
    'vibrant pastel colors',
    'vibrant-color-scheme',
    'vintage',
    'vintage-illustration',
    'vivid colors',
    'voidpunk',
    'volumetric-lighting',
    'voxel-art',
    'vray',
    'watercolor',
    'weirdcore',
    'witchcore',
    'wlop',
    'woodblock',
    'woodblock-print',
    'x-ray-photography',
    'zoomed-out',
]


def create_prompts(num_prompts, prompt_len=1):
    prompt_list = list()
    for _ in range(num_prompts):
        prompt = ''
        for i in range(prompt_len):
            prompt += ' ' + word_list[random.randint(0, len(word_list) - 1 )]
        prompt_list.append(prompt)
    return prompt_list


def get_random_seeds(num_seeds):
    seeds = list()
    while len(seeds) < num_seeds:
        seed = random.randint(1000, 1000000)
        if seed not in seeds:
            seeds.append(seed)
    return seeds


def count_words(text):
    # Remove special characters and numbers
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\d+', '', text)

    # Split the text into words and count them
    words = text.split()
    return len(words)


def create_random_prompts(num_prompts, numeric=False, random_prompt_len=False):
    # Create a string of all possible characters
    all_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    if numeric:
        all_characters = "0123456789"

    prompts = []
    for _ in range(num_prompts):
        torch.manual_seed(random.randint(1, 10000000))

        # Generate a random input length using the randint() function
        prompt_length = 1
        if random_prompt_len:
            prompt_length = random.randint(5, 30)
        prompt = ""
        for _ in range(prompt_length):
            # Generate a random word length for the input using the randint() function
            word_length = random.randint(3, 31)
            # Use the choices() function to randomly select `word_length` characters from `all_characters`
            characters = random.choices(all_characters, k=word_length)
            # Concatenate the selected characters to create a word
            word = "".join(characters)
            # Add the word to the input, separated by a space
            prompt += word + " "
        # Remove the extra space at the end of the input
        prompt = prompt[:-1]
        prompts.append(prompt)
    return prompts


def sample_noise(shape, num=1):
    sample_list = list()
    while len(sample_list) < num:
        sample = randn(size=shape, dtype=torch.float16)
        # sample = normal(mean=mean, std=std, size=shape)
        sample_list.append(sample)

    return sample_list
